import { Link } from 'react-router-dom';
import React, { useEffect } from 'react';

import { tokenMap, routes } from '@constants';
import { DateTimeFromTimestamp } from '@toolbox/timestamp';
import Box from '@toolbox/box';
import BoxHeader from '@toolbox/box/header';
import BoxContent from '@toolbox/box/content';
import CopyToClipboard from '@toolbox/copyToClipboard';
import Feedback from '@toolbox/feedback/feedback';
import LabeledValue from '@toolbox/labeledValue';
import LiskAmount from '@shared/liskAmount';
import TransactionsTable from '@shared/transactionsTable';
import { truncateAddress } from '@utils/account';
import styles from './blockDetails.css';

const getFields = (data, token, t, currentHeight) => ({
  id: {
    label: t('Block ID'),
    value: (
      <CopyToClipboard
        text={truncateAddress(data.id)}
        value={data.id}
        className="tx-id"
        containerProps={{
          size: 'xs',
          className: 'copy-title',
        }}
        copyClassName={styles.copyIcon}
      />
    ),
  },
  height: {
    label: t('Height'),
    value: <CopyToClipboard value={data.height} />,
  },
  version: {
    label: t('Version'),
    value: data.version,
  },
  confirmations: {
    label: t('Confirmations'),
    value: currentHeight ? currentHeight - data.height : '-',
  },
  reward: {
    label: t('Reward'),
    value: <LiskAmount val={data.reward} token={token} />,
  },
  totalFee: {
    label: t('Total fee'),
    value: <LiskAmount val={data.totalFee} token={token} />,
  },
  totalBurnt: {
    label: t('Total burnt'),
    value: <LiskAmount val={data.totalBurnt} token={token} />,
  },
  totalForged: {
    label: t('Total forged'),
    value: <LiskAmount val={data.totalForged} token={token} />,
  },
  // totalAmount: {
  //   label: t('Total amount'),
  //   classList: `${grid['col-xs-3']} ${grid['col-sm-2']} ${grid['col-md-2']}`,
  //   value: <LiskAmount val={Math.max(data.totalAmount - data.totalFee, 0)} token={token} />,
  // },
  date: {
    label: t('Date'),
    value: (
      <DateTimeFromTimestamp
        time={data.timestamp * 1000}
        token={tokenMap.BTC.key}
      />
    ),
  },
  generator: {
    label: t('Generated by'),
    value: (
      <Link to={`${routes.account.path}?address=${data.generatorAddress}`}>
        {data.generatorUsername}
      </Link>
    ),
  },
});

const Rows = ({ data, t, currentHeight }) => {
  const token = tokenMap.LSK.key;
  const fields = getFields(data, token, t, currentHeight);

  const columns = Object.keys(fields).map(field => (
    <LabeledValue
      key={field}
      label={fields[field].label}
      className={styles.dataRow}
    >
      {fields[field].value}
    </LabeledValue>
  ));

  return (
    <div className={styles.dataContainer}>
      { columns }
    </div>
  );
};

const BlockDetails = ({
  t, blockDetails, blockTransactions, match, currentHeight,
}) => {
  const canLoadMore = blockTransactions.meta
    ? blockTransactions.data.length < blockTransactions.meta.total
    : false;

  useEffect(() => {
    blockDetails.loadData();
    blockTransactions.loadData();
  }, [match.url]);

  return (
    <div>
      <Box isLoading={blockDetails.isLoading} width="full">
        <BoxHeader>
          <h1>{t('Block details')}</h1>
        </BoxHeader>
        <BoxContent>
          { blockDetails.error ? (
            <Feedback
              message={t('Failed to load block details.')}
              status="error"
            />
          ) : (
            <Rows
              data={blockDetails.data}
              currentHeight={currentHeight}
              t={t}
            />
          )}
        </BoxContent>
      </Box>
      <TransactionsTable
        title={t('Transactions')}
        transactions={blockTransactions}
        emptyState={{ message: t('There are no transactions for this block.') }}
        canLoadMore={canLoadMore}
      />
    </div>
  );
};

export default BlockDetails;
